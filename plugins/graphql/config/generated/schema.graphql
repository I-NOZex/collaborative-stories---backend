"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Storyblock | StoryblockConnection | StoryblockAggregator | StoryblockAggregatorSum | StoryblockAggregatorAvg | StoryblockAggregatorMin | StoryblockAggregatorMax | StoryblockGroupBy | StoryblockConnection_id | StoryblockConnectionCreatedAt | StoryblockConnectionUpdatedAt | StoryblockConnectionStoryBody | StoryblockConnectionOrder | StoryblockConnectionUser | StoryblockConnectionStorydefinition | Storydefinition | StorydefinitionConnection | StorydefinitionAggregator | StorydefinitionAggregatorSum | StorydefinitionAggregatorAvg | StorydefinitionAggregatorMin | StorydefinitionAggregatorMax | StorydefinitionGroupBy | StorydefinitionConnection_id | StorydefinitionConnectionCreatedAt | StorydefinitionConnectionUpdatedAt | StorydefinitionConnectionTitle | StorydefinitionConnectionUser | StorydefinitionConnectionWordsPerUser | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionAvatar

type Query {
  storyblock(id: ID!): Storyblock
  storyblocks(sort: String, limit: Int, start: Int, where: JSON): [Storyblock]
  storyblocksConnection(sort: String, limit: Int, start: Int, where: JSON): StoryblockConnection
  storydefinition(id: ID!): Storydefinition
  storydefinitions(sort: String, limit: Int, start: Int, where: JSON): [Storydefinition]
  storydefinitionsConnection(sort: String, limit: Int, start: Int, where: JSON): StorydefinitionConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Storyblock {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storyBody: String
  order: Int
  user: UsersPermissionsUser
  storydefinition: Storydefinition
}

type StoryblockAggregator {
  count: Int
  sum: StoryblockAggregatorSum
  avg: StoryblockAggregatorAvg
  min: StoryblockAggregatorMin
  max: StoryblockAggregatorMax
}

type StoryblockAggregatorAvg {
  order: Float
}

type StoryblockAggregatorMax {
  order: Float
}

type StoryblockAggregatorMin {
  order: Float
}

type StoryblockAggregatorSum {
  order: Float
}

type StoryblockConnection {
  values: [Storyblock]
  groupBy: StoryblockGroupBy
  aggregate: StoryblockAggregator
}

type StoryblockConnection_id {
  key: ID
  connection: StoryblockConnection
}

type StoryblockConnectionCreatedAt {
  key: DateTime
  connection: StoryblockConnection
}

type StoryblockConnectionOrder {
  key: Int
  connection: StoryblockConnection
}

type StoryblockConnectionStoryBody {
  key: String
  connection: StoryblockConnection
}

type StoryblockConnectionStorydefinition {
  key: ID
  connection: StoryblockConnection
}

type StoryblockConnectionUpdatedAt {
  key: DateTime
  connection: StoryblockConnection
}

type StoryblockConnectionUser {
  key: ID
  connection: StoryblockConnection
}

type StoryblockGroupBy {
  _id: [StoryblockConnection_id]
  createdAt: [StoryblockConnectionCreatedAt]
  updatedAt: [StoryblockConnectionUpdatedAt]
  storyBody: [StoryblockConnectionStoryBody]
  order: [StoryblockConnectionOrder]
  user: [StoryblockConnectionUser]
  storydefinition: [StoryblockConnectionStorydefinition]
}

type Storydefinition {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  user: UsersPermissionsUser
  wordsPerUser: Int
  storyblocks(sort: String, limit: Int, start: Int, where: JSON): [Storyblock]
  likes(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type StorydefinitionAggregator {
  count: Int
  sum: StorydefinitionAggregatorSum
  avg: StorydefinitionAggregatorAvg
  min: StorydefinitionAggregatorMin
  max: StorydefinitionAggregatorMax
}

type StorydefinitionAggregatorAvg {
  wordsPerUser: Float
}

type StorydefinitionAggregatorMax {
  wordsPerUser: Float
}

type StorydefinitionAggregatorMin {
  wordsPerUser: Float
}

type StorydefinitionAggregatorSum {
  wordsPerUser: Float
}

type StorydefinitionConnection {
  values: [Storydefinition]
  groupBy: StorydefinitionGroupBy
  aggregate: StorydefinitionAggregator
}

type StorydefinitionConnection_id {
  key: ID
  connection: StorydefinitionConnection
}

type StorydefinitionConnectionCreatedAt {
  key: DateTime
  connection: StorydefinitionConnection
}

type StorydefinitionConnectionTitle {
  key: String
  connection: StorydefinitionConnection
}

type StorydefinitionConnectionUpdatedAt {
  key: DateTime
  connection: StorydefinitionConnection
}

type StorydefinitionConnectionUser {
  key: ID
  connection: StorydefinitionConnection
}

type StorydefinitionConnectionWordsPerUser {
  key: Int
  connection: StorydefinitionConnection
}

type StorydefinitionGroupBy {
  _id: [StorydefinitionConnection_id]
  createdAt: [StorydefinitionConnectionCreatedAt]
  updatedAt: [StorydefinitionConnectionUpdatedAt]
  title: [StorydefinitionConnectionTitle]
  user: [StorydefinitionConnectionUser]
  wordsPerUser: [StorydefinitionConnectionWordsPerUser]
}

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  avatar: UploadFile
  liked_stories(sort: String, limit: Int, start: Int, where: JSON): [Storydefinition]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAvatar {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  avatar: [UsersPermissionsUserConnectionAvatar]
}
